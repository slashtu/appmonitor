#!/usr/bin/env node

/**
 * Module dependencies.
 */
global.__base = require( 'path' ).resolve( __dirname , '..' ) + '/';

var app = require('../app');

var debug = require('debug')('app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

console.log('G2CP is Listening at localhost:' + port);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/* -------------------------- HTTPS ------------------------------ */

// var fs = require('fs');
// var https = require('https');

// var privateKey  = fs.readFileSync('./ssl/nxgme.key', 'utf8');
// var certificate = fs.readFileSync('./ssl/nxgme.crt', 'utf8');

// var credentials = {key: privateKey, cert: certificate};

// var https_port = 8080

// var https_server = https.createServer( credentials, app);

// console.log('G2CP HTTPS is Listening at localhost:' + https_port);

// https_server.listen(https_port);
// https_server.on('error', onError);
// https_server.on('listening', onListening);

/* -------------------------- HTTPS ------------------------------ */


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//----------  For development ------------//
// if(process.env.NODE_ENV === 'development' ){
//   var webpack = require('webpack');
//   var WebpackDevServer = require('webpack-dev-server');
//   var config = require('../webpack.server.config');

//   new WebpackDevServer(webpack(config), {
//     publicPath: config.output.publicPath,
//     hot: true,
//     historyApiFallback: true,
//     stats: {
//       colors: true
//     }
//   }).listen(8001, 'localhost', function (err) {
//     if (err) {
//       console.log(err);
//     }

//     console.log('Webpack Server is Listening at localhost:8001');
//   });
// }

var randomCountry = require('random-country');

var WebSocketServer = require('websocket').server;
var http = require('http');
 
var server = http.createServer(function(request, response) {
    console.log((new Date()) + ' Received request for ' + request.url);
    response.writeHead(404);
    response.end();
});
server.listen(8080, function() {
    console.log((new Date()) + ' Server is listening on port 8080');
});
 
wsServer = new WebSocketServer({
    httpServer: server,
    // You should not use autoAcceptConnections for production 
    // applications, as it defeats all standard cross-origin protection 
    // facilities built into the protocol and the browser.  You should 
    // *always* verify the connection's origin and decide whether or not 
    // to accept it. 
    autoAcceptConnections: false
});
 
function originIsAllowed(origin) {
  // put logic here to detect whether the specified origin is allowed. 
  return true;
}
 
wsServer.on('request', function(request) {
    if (!originIsAllowed(request.origin)) {
      // Make sure we only accept requests from an allowed origin 
      request.reject();
      console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');
      return;
    }
    
    var connection = request.accept('echo-protocol', request.origin);
    console.log((new Date()) + ' Connection accepted.');

    setInterval(
      function(){
      connection.send(
        JSON.stringify({
          site_id: 'dummy',
          onlineusercount: 69 + Math.round(Math.random()*5),
          latitude: Math.floor(Math.random() * 181) - 90,
          longitude: Math.floor(Math.random() * 361) - 180,
          ip: Math.floor(Math.random() * 255) + '.' + Math.floor(Math.random() * 255) + '.' + Math.floor(Math.random() * 255) + '.' + Math.floor(Math.random() * 255),
          country: randomCountry({ full: true }),
          gt_ms: Math.floor(Math.random() * 500),
          url: 'https://example.com'
        })
      )}, 300);

    connection.on('message', function(message) {
        if (message.type === 'utf8') {
            console.log('Received Message: ' + message.utf8Data);
            connection.sendUTF(message.utf8Data);
        }
        else if (message.type === 'binary') {
            console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');
            connection.sendBytes(message.binaryData);
        }
    });
    connection.on('close', function(reasonCode, description) {
        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');
    });
});